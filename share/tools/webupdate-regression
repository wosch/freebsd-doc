#!/bin/sh
# Copyright (c) 2017 Wolfram Schneider <wosch@FreeBSD.org>
#
# test the build of www.freebsd.org
#
# examples:
#
# run on 2 CPUs
# make_opt=-j2 /path/to/webupdate-regression
#
# run from a local GIT repo in $HOME/freebsd-doc
# GIT_REPO_FREEBSD_DOC="$HOME/freebsd-doc" /path/to/webupdate-regression
#
# build html-split format only, on 8 CPUs
# WEBUPDATE_FORMATS="html-split" make_opt=-j8 /path/to/webupdate-regression
#
# build html and html-split format, on 16 CPUs max.
# WEBUPDATE_FORMATS="html html-split" make_opt=-j16 /path/to/webupdate-regression
#
# do not run the `make clean`' test after successfully build
# WEBUPDATE_CLEAN=NO /path/to/webupdate-regression
#

set -e

: ${NO_OBJ=YES}
: ${make_opt=-j8}
: ${GIT_REPO_FREEBSD_DOC="$HOME/doc"}
: ${WEBUPDATE_FORMATS="html-split html"}
: ${WEBUPDATE_CLEAN=YES}

FORMATS=$WEBUPDATE_FORMATS
export NO_OBJ WEBUPDATE_FORMATS


log () {
  file=$1
  echo " ...done $file"
  echo "build done" >> $file
}

checkout ()
{
  dir=$(mktemp -d /tmp/doc-build.XXXXXXX)

  cd $dir
  echo "Run from $dir"

  echo "git clone"
  git clone -q $GIT_REPO_FREEBSD_DOC doc
  cd doc
}

build_doc ()
{
  logfile=$1
  echo -n "build doc"
  time make $make_opt p-all >> $logfile 2>&1; log $logfile
}

build_htdocs_web ()
{
  logfile=$1
  (
  echo -n "build htdocs web"
  cd en_US.ISO8859-1/htdocs
  WEB_ONLY=YES time make $make_opt >> $logfile 2>&1; log $logfile
  )
}

build_htdocs ()
{
  logfile=$1
  (
  echo -n "build htdocs"
  cd en_US.ISO8859-1/htdocs
  time make $make_opt all >> $logfile 2>&1; log $logfile 
  )
}

install_htdocs ()
{
  logfile=$1
  (
  echo -n "install htdocs web"
  cd en_US.ISO8859-1/htdocs
  DESTDIR=$dir/www WEB_ONLY=YES time make $make_opt install >> $logfile 2>&1; log $logfile 
  )
}

install_doc ()
{
  logfile=$1
  (
  echo "no parallel install"
  make_opt=

  echo -n "install htdocs"
  cd en_US.ISO8859-1/htdocs
  DESTDIR=$dir/www time make $make_opt install >> $logfile 2>&1; log $logfile 
  )
}

clean_doc ()
{
  logfile=$1
  echo -n "clean doc"
  time make $make_opt p-clean >> $logfile 2>&1; log $logfile 
}

clean_htdocs ()
{
  logfile=$1
  (
  echo -n "clean htdocs web"
  cd en_US.ISO8859-1/htdocs
  WEB_ONLY=YES time make $make_opt clean >> $logfile 2>&1; log $logfile 
  )
}

checkout
build_doc log.build_doc
build_doc log.build_doc2
build_htdocs_web log.build_htdocs_web
build_htdocs_web log.build_htdocs_web2
build_htdocs log.build_htdocs
build_htdocs log.build_htdocs2

install_htdocs log.install_htdocs
install_htdocs log.install_htdocs2
install_doc log.install_doc
install_doc log.install_doc2

echo "installed web: $(du -hs $dir/www)"
echo "installed files: $(find $dir/www | wc -l)"

if [ "$WEBUPDATE_CLEAN" = "YES" ]; then
  (cd ..; tar cf - www > www.tar )

  clean_htdocs cw.log
  clean_htdocs cw2.log
  clean_doc c.log
  clean_doc c2.log
fi

echo ""
echo "successfully done"
echo ""

# display user time for each task
tail -n 2 $(find -s . -name 'log.*')

echo ""
echo "Please cleanup: rm -rf $dir"

exit 0

#EOF
